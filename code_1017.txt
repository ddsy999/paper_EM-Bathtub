
library(reshape2)
library(dplyr)
library(ggplot2)
library(patchwork)


####### Denote function ####

printResult = function(){
  print("#####################################################################################################################")
  print( paste0( "EM iteration : " , i ," sumQ :",sumQfunc(beta_vec,lambda_vec,pi_vec,old_latentZ_mat) , " Bp : ",bp))
  print(paste0(c("pi_vec : " , sapply(pi_vec , function(i) round(i,2))),collapse = " / "))
  print(paste0(c("Lambda : " , sapply(lambda_vec , function(i) round(i,2))),collapse = " / "))
  print(paste0(c("Beta :",sapply(beta_vec , function(i) round(i,4))) ,collapse = " / "))
  print(paste0("Beta diff : " , diffB_onlyB(beta_vec[1],lambda_vec[1],old_latentZ_mat,j=1) %>% abs+
                 diffB_onlyB(beta_vec[3],lambda_vec[3],old_latentZ_mat,j=3) %>% abs))
  print(paste0(c("Beta1 at 1 is minus :",diffB_onlyB(1,lambda_vec[1],old_latentZ_mat,j=1)<0) ,collapse = " / "))
  print(paste0(" data save : ", nrow(theta_df)))
  print("#####################################################################################################################")
}

Qfunc = function(beta = 1 ,lambda,pi_vec, latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec*log(lambda)) +
    sum(latentZ_mat[,j]*event_vec*log(beta)) +
    sum(latentZ_mat[,j]*event_vec*(beta-1)*log(time_vec)) -
    sum(latentZ_mat[,j]*lambda*time_vec^beta) +
  sum(latentZ_mat[,j]*log(pi_vec[j]))
}

Qfunc_with_bp_1 = function(beta = 1 ,lambda, latentZ_mat, j=1,bp){
  Qfunc_onlyB(beta=beta,latentZ_mat,j)+(log(beta)+log(1-beta))/bp
}

Qfunc_with_bp_3 = function(beta = 1 ,lambda, latentZ_mat, j=3,bp){
  Qfunc_onlyB(beta=beta,latentZ_mat,j)+(log(beta-1))/bp
}

sumQfunc_with_bp = function(beta_vec,lambda_vec,latentZ_mat ,bp){
  Qfunc_with_bp_1(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1,bp)+Qfunc(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc_with_bp_3(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3,bp)
}


Qfunc_onlyB = function(beta = 1 ,latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec)*log(sum(latentZ_mat[,j]*event_vec)/sum(latentZ_mat[,j]*(time_vec^beta)))+
    sum(latentZ_mat[,j]*event_vec*log(beta))+
    sum(latentZ_mat[,j]*event_vec*(beta-1)*log(time_vec))-
    sum(latentZ_mat[,j]*event_vec)
}

sumQfunc = function(beta_vec,lambda_vec,pi_vec,latentZ_mat ){
  Qfunc(beta=beta_vec[1],lambda_vec[1],pi_vec,latentZ_mat,j=1)+Qfunc(beta=beta_vec[2],lambda_vec[2],pi_vec,latentZ_mat,j=2)+Qfunc(beta=beta_vec[3],lambda_vec[3],pi_vec,latentZ_mat,j=3)
}

sumQfunc_onlyB = function(beta_vec,lambda_vec,latentZ_mat ){
  Qfunc_onlyB(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1)+Qfunc_onlyB(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc_onlyB(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
}

hazardrate = function(t,beta,lambda){
  beta*lambda *t^(beta-1)
}

weibull_func = function(t,beta,lambda){
  lambda*beta*t^(beta-1)*exp(-lambda*(t^beta))
}

diffB = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*event_vec/beta + latentZ_mat[,j]*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta*log(time_vec))
}


diffB_onlyB = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*event_vec)/beta + 
    sum(latentZ_mat[,j]*event_vec*log(time_vec))-
    sum(latentZ_mat[,j]*event_vec)*sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))/sum(latentZ_mat[,j]*(time_vec^beta))
}



diffB_onlyBeta1_with_Barrier = function(beta,lambda,latentZ_mat,j,bp){
  diffB_onlyB(beta,lambda,latentZ_mat,j)+(1/(beta)-1/(1-beta))/bp
}


diffB_onlyBeta3_with_Barrier = function(beta,lambda,latentZ_mat,j,bp){
  diffB_onlyB(beta,lambda,latentZ_mat,j)+(1/(beta-1))/bp
}


diffL = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*(event_vec/lambda - time_vec^beta))
}


# 2차 미분 (헤시안) 계산 함수
hessianB_onlyBeta1_with_Barrier <- function(beta, lambda, latentZ_mat, j, bp) {
  # 배리어 항에 대한 2차 미분
  barrier_hessian <- -1 / beta^2 - 1 / (1 - beta)^2
  
  # 목적 함수 diffB_onlyB에 대한 2차 미분 계산 (Q''(beta))
  # 각 부분에 대한 2차 도함수를 계산
  event_sum <- sum(latentZ_mat[,j]*event_vec)
  log_time_sum <- sum(latentZ_mat[,j]*log(time_vec))
  time_beta_log_sum <- sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))
  time_beta_sum <- sum(latentZ_mat[,j]*(time_vec^beta))
  
  # diffB_onlyB에서의 2차 미분 계산
  hessian_Q <- -event_sum*((sum(latentZ_mat[,j]*(time_vec^beta)*(log(time_vec)^2)) * time_beta_sum - 
                              time_beta_log_sum^2) / time_beta_sum^2) -event_sum/beta^2
  
  # 최종 헤시안은 목적 함수의 2차 도함수와 배리어 함수의 2차 도함수를 합한 것
  total_hessian <- hessian_Q + barrier_hessian / bp
  
  return(total_hessian)
}

hessianB_onlyBeta3_with_Barrier <- function(beta, lambda, latentZ_mat, j, bp) {
  # 배리어 항에 대한 2차 미분
  barrier_hessian <- -1 / (beta-1)^2
  # barrier_hessian = 0
  # 목적 함수 diffB_onlyB에 대한 2차 미분 계산 (Q''(beta))
  # 각 부분에 대한 2차 도함수를 계산
  event_sum <- sum(latentZ_mat[,j]*event_vec)
  log_time_sum <- sum(latentZ_mat[,j]*log(time_vec))
  time_beta_log_sum <- sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))
  time_beta_sum <- sum(latentZ_mat[,j]*(time_vec^beta))
  
  # diffB_onlyB에서의 2차 미분 계산
  hessian_Q <- (- event_sum * 
                  ((sum(latentZ_mat[,j]*(time_vec^beta)*(log(time_vec)^2)) * time_beta_sum - 
                      time_beta_log_sum^2) / time_beta_sum^2)) -event_sum / beta^2
  
  # 최종 헤시안은 목적 함수의 2차 도함수와 배리어 함수의 2차 도함수를 합한 것
  total_hessian <- hessian_Q + barrier_hessian / bp
  
  return(total_hessian)
}




newton_onlyBeta1 <- function(beta, lambda, latentZ_mat, j, bp, alpha = 0.25, beta_factor = 0.5) {
  # 1차 도함수 (Gradient)
  gradient <- diffB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 2차 도함수 (Hessian)
  hessian <- hessianB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 뉴턴-랩슨 스텝
  step <- gradient / hessian
  
  # 초기 스텝 사이즈
  step_size <- 1
  
  # 목표 함수 값
  # Q_current <- Q_total(beta, lambda, latentZ_mat, j, bp, event_vec, time_vec)
  
  # 뉴턴-랩슨 갱신
  
  beta_new <- beta - step_size * step
  
  # 백트래킹 라인 서치
  while (beta_new <= 0 || beta_new >= 0.9999) {
    # 스텝 사이즈 감소
    step_size <- step_size * beta_factor
    
    # 최소 스텝 사이즈 제한 (무한 루프 방지)
    if (step_size < 1e-8) {
      warning("Step size became too small. Update may not satisfy constraints.")
      break
    }
  }
  
  # print(paste0("newton_onlyBeta1", " beta before :" ,beta," step:",step, " After beta :",beta - step_size * step))
  # 갱신된 스텝 사이즈로 beta_new 계산
  beta_new <- beta - step_size * step
  
  return(beta_new)
}



newton_onlyBeta3 <- function(beta, lambda, latentZ_mat, j, bp, alpha = 0.25, beta_factor = 0.5) {
  # 1차 도함수 (Gradient)
  gradient <- diffB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 2차 도함수 (Hessian)
  hessian <- hessianB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 뉴턴-랩슨 스텝
  step <- gradient / hessian
  
  # 초기 스텝 사이즈
  step_size <- 1
  
  # 목표 함수 값
  # Q_current <- Q_total(beta, lambda, latentZ_mat, j, bp, event_vec, time_vec)
  
  # 뉴턴-랩슨 갱신
  beta_new <- beta - step_size * step
  
  # 백트래킹 라인 서치
  while (beta_new <= 1) {
    # 스텝 사이즈 감소
    step_size <- step_size * beta_factor
    
    # 최소 스텝 사이즈 제한 (무한 루프 방지)
    if (step_size < 1e-8) {
      warning("Step size became too small. Update may not satisfy constraints.")
      break
    }
    
    # 갱신된 스텝 사이즈로 beta_new 계산
    beta_new <- beta - step_size * step
  }
  
  return(beta_new)
}





newton_onlyBeta1_stepsize <- function(beta, lambda, latentZ_mat, j, bp, step_size=1,beta_factor=0.25) {
  # 1차 도함수 (Gradient)
  gradient <- diffB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  step = gradient
  beta_new <- beta - step_size * step
  
  # 백트래킹 라인 서치
  while (beta_new <= 0 || beta_new >= 0.9999) {
    # 스텝 사이즈 감소
    step_size <- step_size * beta_factor
    
    # 최소 스텝 사이즈 제한 (무한 루프 방지)
    if (step_size < 1e-8) {
      warning("Step size became too small. Update may not satisfy constraints.")
      break
    }
    
    # 갱신된 스텝 사이즈로 beta_new 계산
    beta_new <- beta - step_size * step
  }
  
  return(beta_new)
}
  
  
  
  
  newton_onlyBeta3_stepsize  <- function(beta, lambda, latentZ_mat, j, bp, step_size=1,beta_factor=0.25) {
    # 1차 도함수 (Gradient)
    gradient <- diffB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
    step = gradient
    beta_new <- beta - step_size * step
    
    # 백트래킹 라인 서치
    while (beta_new <= 1) {
      # 스텝 사이즈 감소
      step_size <- step_size * beta_factor
      
      # 최소 스텝 사이즈 제한 (무한 루프 방지)
      if (step_size < 1e-8) {
        warning("Step size became too small. Update may not satisfy constraints.")
        break
      }
      
      # 갱신된 스텝 사이즈로 beta_new 계산
      beta_new <- beta - step_size * step
    }
    
    return(beta_new)
  }
  
  
  
  




diff_vec = function(beta,lambda,latentZ_mat,j){
  matrix(c(diffB(beta[j],lambda[j],latentZ_mat,j),diffL(beta[j],lambda[j],latentZ_mat,j)),2,1)
}

DecisionBoundary = function(t,beta_vec,lambda_vec,j=1){
  (pi_vec[j]/pi_vec[2])*(beta_vec[j]/beta_vec[2])*(lambda_vec[j]/lambda_vec[2])*t^(beta_vec[j]-1)*exp(-lambda_vec[j]*t^{beta_vec[j]}+lambda_vec[2]*t)
}


Estep_result = function(beta,lambda,pi_vec){
  weibull_pdfs = sapply(1:3, function(i) pi_vec[i]*weibull_func(time_vec, lambda = lambda[i], beta = beta[i]))
  weibull_pdf_sum = rowSums(weibull_pdfs)
  latentZ_mat = weibull_pdfs/weibull_pdf_sum
  latentZ_mat
}

scale_to_max <- function(x) {
  return(x / max(x))
}
scale_rows_to_sum1 <- function(mat) {
  return(t(apply(mat, 1, function(x) x / sum(x))))
}



############
# How to Identify a Bathtub Hazard Rate
# 107p


# fdata = read.table('Aarest_data.txt',header = T)
# fdata = read.table('Aarest_data_censored_rot1.txt',header = T)
# fdata = read.table('Aarest_data_censored_rot2.txt',header = T)
# fdata = read.table('Aarest_data_endCensored.txt',header = T)
# fdata = read.table('FRT_censord.txt',header = T)

fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot1.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot2.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot3.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot4.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot5.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_endCensored.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/FRT_censord.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/CNC_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/CNC_data_censored3.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/electronic_device.txt',header = T)


# Data preprocessing
N = nrow(fdata)
k=3 
event_vec = fdata[,2] %>% as.numeric()
time_vec = fdata[,1]%>% as.numeric()
time_vec = time_vec/max(time_vec)*2
# time_vec = time_vec/max(time_vec)
tot=1e-4
maxBp = 1e+8

# 11개의 열을 가진 빈 data.frame 생성

column_names <- c("beta1", "lambda1", "beta2", "lambda2", "beta3", "lambda3", "sumQfunc","diffB_beta1","diffB_beta3","bp","iter","Beta1 at 1","Q1","Q2","Q3","pi1","pi2","pi3","latentDiff")
theta_df <- data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(theta_df) <- column_names

## initial beta , lambda , pi 
initial_beta = c(0.5,1,5)
initial_pi_set = c(1,1,1)
# initial_pi = c(1,100,1)
initial_pi = initial_pi_set / sum(initial_pi_set)

## Parameters initialize beta,pi
beta_vec = initial_beta
pi_vec = initial_pi
learning_rate = 1.001



library(survival)
surv_obj <- Surv(time_vec, event_vec)
km_fit <- survfit(surv_obj ~ 1)
cum_hazard <- cumsum(km_fit$n.event / km_fit$n.risk)
hazard_rate <- diff(cum_hazard) / diff(km_fit$time)
# plot(hazard_rate)

censored1 = 5
censored3 = 25

# censored1까지의 시간 벡터 및 위험률 추출
time_censored1 <-unique(time_vec)[1:censored1]
# beta_vec[1]을 사용하여 시간 벡터를 제곱
time_transformed1 <- beta_vec[1]*time_censored1^beta_vec[1]
# 위험률 벡터의 검열된 값 추출
hazard_censored1 <- cum_hazard[1:censored1]
# 선형 회귀 실행
lm_fit1 <- lm(hazard_censored1 ~ time_transformed1)
lm_fit1$coefficients[2]

# censored3 시간 벡터 및 위험률 추출
time_censored3 <-unique(time_vec)[censored3:length(cum_hazard)]
time_transformed3 <- beta_vec[3]*time_censored3^beta_vec[3]
# 위험률 벡터의 검열된 값 추출
hazard_censored3 <- cum_hazard[censored3:length(cum_hazard)]
# 선형 회귀 실행
lm_fit3 <- lm(hazard_censored3 ~ time_transformed3)
lm_fit3$coefficients[2]

## initial lambda
lambda_vec = c(lm_fit1$coefficients[2],mean(hazard_rate[5:25]),lm_fit3$coefficients[2]) %>% as.vector()


#### initial E-Step ####
latentZ_mat = Estep_result(beta_vec,lambda_vec,pi_vec)
################

## init bp
bp=0.01


old_sumQ_EM = sumQfunc(beta_vec,lambda_vec,pi_vec,latentZ_mat)
new_sumQ_EM = 99999
difference = 99999
parameter_beta_difference = 99999

old_latentZ_mat = latentZ_mat 

result_beta_vec = NULL
result_lambda_vec = NULL
result_pi_vec = NULL
result_latentZmat = NULL 
result_latentZ_mat = NULL

old_Q1 = Qfunc(beta_vec[1],lambda_vec[1],pi_vec,latentZ_mat,j=1)
old_Q2 = Qfunc(beta_vec[2],lambda_vec[2],pi_vec,latentZ_mat,j=2)
old_Q3 = Qfunc(beta_vec[3],lambda_vec[3],pi_vec,latentZ_mat,j=3)

old_Q1_onlyB = Qfunc_onlyB(beta_vec[1],latentZ_mat,j=1)
old_Q2_onlyB = Qfunc_onlyB(beta_vec[2],latentZ_mat,j=2)
old_Q3_onlyB = Qfunc_onlyB(beta_vec[3],latentZ_mat,j=3)

latentDiff = 0

for( i in 1:200){
  
  printResult()

  
  # if(new_sumQ_EM<old_sumQ_EM){
  #   print(paste0(" Break : Decreasing sumQ  new:",new_sumQ_EM, " < old :",old_sumQ_EM))
  #   break
  # }
  
  
  #### M-step : Barrier-Method , with fixed E-step-latentZ_mat
  print("#### M-Step ####")
  bp = 0.01
  
  #### estimate pi ####
  new_pi_vec = colSums(latentZ_mat)/N
  
  #### M-Step : t-increasing find parameters #### 
  
  #### start beta parameters ####
  before_beta1 = beta_vec[1]
  before_beta2 = beta_vec[2]
  before_beta3 = beta_vec[3]
  
  #### M-Step : Barrier - method #### 
  
  while(TRUE){
    
    #### increasing t ####
    bp=learning_rate*bp
    
    if(bp>maxBp){
      print(paste0(" While Max Bp Break " ,bp))
      break
    }
    
    #### M-Step : N-R method #### 
    while(TRUE){
      
      #### estimate NR : Beta 
      new_beta1 = newton_onlyBeta1(beta=before_beta1, lambda=lambda_vec[1], latentZ_mat, j=1, bp)
      new_beta2 = 1
      new_beta3 = newton_onlyBeta3(beta=before_beta3, lambda=lambda_vec[3], latentZ_mat, j=3, bp)
      
      #### estimate : Lambda
      new_lambda1 = sum(latentZ_mat[,1]*event_vec)/sum(latentZ_mat[,1]*(time_vec^new_beta1))
      new_lambda2 = sum(latentZ_mat[,2]*event_vec)/sum(latentZ_mat[,2]*(time_vec^new_beta2))
      new_lambda3 = sum(latentZ_mat[,3]*event_vec)/sum(latentZ_mat[,3]*(time_vec^new_beta3))
      
      #### candidate EM parameter
      new_beta   = c(new_beta1,1,new_beta3)
      new_lambda = c(new_lambda1,new_lambda2,new_lambda3)
      
      
      NR_Difference = sqrt((before_beta1-new_beta[1])^2+(before_beta2-new_beta[2])^2+(before_beta3-new_beta[3])^2)
      if(NR_Difference<tot){
        # print("NR_Difference<tot")
        break
      }
      
      before_beta1 = new_beta[1]
      before_beta2 = new_beta[2]
      before_beta3 = new_beta[3]
      
    }
  }
  
  ##### new beta , new pi is obtained ##### 
  
  new_Q1 = Qfunc(new_beta[1],new_lambda[1],new_pi_vec,latentZ_mat,j=1)
  new_Q2 = Qfunc(new_beta[2],new_lambda[2],new_pi_vec,latentZ_mat,j=2)
  new_Q3 = Qfunc(new_beta[3],new_lambda[3],new_pi_vec,latentZ_mat,j=3)
  
  new_Q1_onlyB = Qfunc_onlyB(new_beta[1],latentZ_mat,j=1)
  new_Q2_onlyB = Qfunc_onlyB(new_beta[2],latentZ_mat,j=2)
  new_Q3_onlyB = Qfunc_onlyB(new_beta[3],latentZ_mat,j=3)
  
  parameter_beta_difference = sqrt(sum(beta_vec-new_beta)^2)
  

  Update_theta_df = 0
  # Update Beta parameter 
  
  if(new_Q1_onlyB<old_Q1_onlyB || new_Q3_onlyB<old_Q3_onlyB || new_Q2_onlyB<old_Q2_onlyB ){
    print("Not Update : Beta1 ,  Beta3  ")
    break
  }else{
    Update_theta_df = 1
    # 바꿔 끼우기 
    if(new_Q1_onlyB>old_Q1_onlyB){
      print("#### Update Beta1 parameter ####")
      beta_vec[1] = new_beta[1]
      lambda_vec[1] = new_lambda[1]
      old_Q1_onlyB=new_Q1_onlyB
    }
    
    if(new_Q3_onlyB>old_Q3_onlyB){
      print("#### Update Beta3 parameter ####")
      beta_vec[3] = new_beta[3]
      lambda_vec[3] = new_lambda[3]
      old_Q3_onlyB=new_Q3_onlyB
    }
    
    beta_vec[2]=1
    lambda_vec[2] = new_lambda[2]
    old_Q2_onlyB=new_Q2_onlyB
  }
  
  # Update Pi parameter
  pi_vec = new_pi_vec
  
  
  #### Update E-Step by New parameters ####
  old_latentZ_mat = latentZ_mat
  latentDiff = sum(abs(latentZ_mat - Estep_result(new_beta,new_lambda,new_pi_vec) ))
  latentZ_mat = Estep_result(new_beta,new_lambda,new_pi_vec)
  
  ################
  
  if(Update_theta_df == 1){
    print("#### Update theta_df ####")
    theta_df = rbind(theta_df,
                     c(new_beta[1],new_lambda[1],new_beta[2],new_lambda[2],new_beta[3],new_lambda[3],
                       new_Q1+new_Q2+new_Q3,
                       diffB_onlyB(new_beta[1],new_lambda[1],old_latentZ_mat,j=1) ,
                       diffB_onlyB(new_beta[3],new_lambda[3],old_latentZ_mat,j=3) ,
                       bp,i,diffB_onlyB(1,new_lambda[1],old_latentZ_mat,j=1),
                       new_Q1_onlyB,
                       new_Q2_onlyB,
                       new_Q3_onlyB,
                       new_pi_vec[1],
                       new_pi_vec[2],
                       new_pi_vec[3],
                       latentDiff
                     ))
  }
  
  
  
}

colnames(theta_df) <- column_names
theta_df$initial_pi2 = initial_pi_set[2] %>% as.character()
theta_df$initial_beta1 = initial_beta[1] %>% as.character()
theta_df$initial_beta3 = initial_beta[3] %>% as.character()
theta_df_full = rbind(theta_df_full,theta_df)








