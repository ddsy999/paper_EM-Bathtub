




library(reshape2)
library(dplyr)
library(ggplot2)
library(patchwork)


####### Denote function ####

Qfunc = function(beta = 1 ,lambda, latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec*log(lambda)) +
    sum(latentZ_mat[,j]*event_vec*log(beta)) +
    sum(latentZ_mat[,j]*event_vec*(beta-1)*log(time_vec)) -
    sum(latentZ_mat[,j]*lambda*time_vec^beta) +
    sum(latentZ_mat[,j]*log(pi_vec[j]))
}

Qfunc_with_bp_1 = function(beta = 1 ,lambda, latentZ_mat, j=1,bp){
  # Qfunc_onlyB(beta=beta,latentZ_mat,j)+(log(beta)+log(1-beta))/bp
  Qfunc_onlyB(beta=beta,latentZ_mat,j)+(log(1-beta))/bp
}

Qfunc_with_bp_3 = function(beta = 1 ,lambda, latentZ_mat, j=3,bp){
  Qfunc_onlyB(beta=beta,latentZ_mat,j)+(log(beta-1))/bp
}

sumQfunc_with_bp = function(beta_vec,lambda_vec,latentZ_mat ,bp){
  Qfunc_with_bp_1(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1,bp)+Qfunc(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc_with_bp_3(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3,bp)
}


Qfunc_onlyB = function(beta = 1 ,latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec)*log(sum(latentZ_mat[,j]*event_vec)/sum(latentZ_mat[,j]*(time_vec^beta)))+
    sum(latentZ_mat[,j]*event_vec*log(beta))+
    sum(latentZ_mat[,j]*event_vec*(beta-1)*log(time_vec))-
    sum(latentZ_mat[,j]*event_vec)
}

sumQfunc = function(beta_vec,lambda_vec,latentZ_mat ){
  Qfunc(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1)+Qfunc(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
}

sumQfunc_onlyB = function(beta_vec,lambda_vec,latentZ_mat ){
  Qfunc_onlyB(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1)+Qfunc_onlyB(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc_onlyB(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
}

hazardrate = function(t,beta,lambda){
  beta*lambda *t^(beta-1)
}

weibull_func = function(t,beta,lambda){
  lambda*beta*t^(beta-1)*exp(-lambda*(t^beta))
}

diffB = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*event_vec/beta + latentZ_mat[,j]*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta*log(time_vec))
}


diffB_onlyB = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*event_vec)/beta + 
    sum(latentZ_mat[,j]*event_vec*log(time_vec))-
    sum(latentZ_mat[,j]*event_vec)*sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))/sum(latentZ_mat[,j]*(time_vec^beta))
}



diffB_onlyBeta1_with_Barrier = function(beta,lambda,latentZ_mat,j,bp){
  diffB_onlyB(beta,lambda,latentZ_mat,j)+(1/(beta)-1/(1-beta))/bp
  # diffB_onlyB(beta,lambda,latentZ_mat,j)+(-1/(1-beta))/bp
}


diffB_onlyBeta3_with_Barrier = function(beta,lambda,latentZ_mat,j,bp){
  diffB_onlyB(beta,lambda,latentZ_mat,j)+(1/(beta-1))/bp
}


diffL = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*(event_vec/lambda - time_vec^beta))
}


# 2차 미분 (헤시안) 계산 함수
hessianB_onlyBeta1_with_Barrier <- function(beta, lambda, latentZ_mat, j, bp) {
  # 배리어 항에 대한 2차 미분
  barrier_hessian <- -1 / beta^2 - 1 / (1 - beta)^2
  
  # 목적 함수 diffB_onlyB에 대한 2차 미분 계산 (Q''(beta))
  # 각 부분에 대한 2차 도함수를 계산
  event_sum <- sum(latentZ_mat[,j]*event_vec)
  log_time_sum <- sum(latentZ_mat[,j]*log(time_vec))
  time_beta_log_sum <- sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))
  time_beta_sum <- sum(latentZ_mat[,j]*(time_vec^beta))
  
  # diffB_onlyB에서의 2차 미분 계산
  hessian_Q <- -event_sum*((sum(latentZ_mat[,j]*(time_vec^beta)*(log(time_vec)^2)) * time_beta_sum - 
                              time_beta_log_sum^2) / time_beta_sum^2) -event_sum/beta^2
  
  # 최종 헤시안은 목적 함수의 2차 도함수와 배리어 함수의 2차 도함수를 합한 것
  total_hessian <- hessian_Q + barrier_hessian / bp
  
  return(total_hessian)
}

hessianB_onlyBeta3_with_Barrier <- function(beta, lambda, latentZ_mat, j, bp) {
  # 배리어 항에 대한 2차 미분
  barrier_hessian <- -1 / (beta-1)^2
  # barrier_hessian = 0
  # 목적 함수 diffB_onlyB에 대한 2차 미분 계산 (Q''(beta))
  # 각 부분에 대한 2차 도함수를 계산
  event_sum <- sum(latentZ_mat[,j]*event_vec)
  log_time_sum <- sum(latentZ_mat[,j]*log(time_vec))
  time_beta_log_sum <- sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))
  time_beta_sum <- sum(latentZ_mat[,j]*(time_vec^beta))
  
  # diffB_onlyB에서의 2차 미분 계산
  hessian_Q <- (- event_sum * 
                  ((sum(latentZ_mat[,j]*(time_vec^beta)*(log(time_vec)^2)) * time_beta_sum - 
                      time_beta_log_sum^2) / time_beta_sum^2)) -event_sum / beta^2
  
  # 최종 헤시안은 목적 함수의 2차 도함수와 배리어 함수의 2차 도함수를 합한 것
  total_hessian <- hessian_Q + barrier_hessian / bp
  
  return(total_hessian)
}




newton_onlyBeta1 <- function(beta, lambda, latentZ_mat, j, bp, alpha = 0.25, beta_factor = 0.5) {
  # 1차 도함수 (Gradient)
  gradient <- diffB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 2차 도함수 (Hessian)
  hessian <- hessianB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  diff_size = diffB_onlyB(beta,lambda,latentZ_mat,j) %>% abs
  if((1 / hessian)<diff_size){
    step_size = 1 / hessian    
  }else{
    step_size = diff_size
  }
  
  # 목표 함수 값
  # Q_current <- Q_total(beta, lambda, latentZ_mat, j, bp, event_vec, time_vec)
  
  # 뉴턴-랩슨 갱신
  beta_new <- beta - gradient * step_size
  
  return(beta_new)
}



newton_onlyBeta3 <- function(beta, lambda, latentZ_mat, j, bp, alpha = 0.25, beta_factor = 0.5) {
  # 1차 도함수 (Gradient)
  gradient <- diffB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 2차 도함수 (Hessian)
  hessian <- hessianB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  
  # 뉴턴-랩슨 스텝

  diff_size = diffB_onlyB(beta,lambda,latentZ_mat,j) %>% abs
  if((1 / hessian)<diff_size){
    step_size = 1 / hessian    
  }else{
    step_size = diff_size
  }
  
  # 목표 함수 값
  # Q_current <- Q_total(beta, lambda, latentZ_mat, j, bp, event_vec, time_vec)
  
  # 뉴턴-랩슨 갱신
  beta_new <- beta - gradient * step_size
  

  
  return(beta_new)
}





newton_onlyBeta1_stepsize <- function(beta, lambda, latentZ_mat, j=1, bp) {
  gradient = diffB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
   hessian <- hessianB_onlyBeta1_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  while(TRUE){
    if(beta + gradient<0 || beta + gradient >1 ){
      gradient = gradient*0.9
    }else{
      break
    }
  }
  
  beta_new = beta + gradient
  return(beta_new)
}


newton_onlyBeta3_stepsize  <- function(beta, lambda, latentZ_mat, j, bp) {
  gradient = diffB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  hessian <- hessianB_onlyBeta3_with_Barrier(beta, lambda, latentZ_mat, j, bp)
  while(TRUE){
    if( beta + gradient <1 ){
      gradient = gradient*0.5
    }else{
      break
    }
  }
  
  beta_new = beta + gradient
  return(beta_new)
}



newton_onlyBeta = function(beta, latentZ_mat, j){
  gradient = diffB_onlyB(beta,lambda=NULL,latentZ_mat,j)
  
  event_sum <- sum(latentZ_mat[,j]*event_vec)
  log_time_sum <- sum(latentZ_mat[,j]*log(time_vec))
  time_beta_log_sum <- sum(latentZ_mat[,j]*(time_vec^beta)*log(time_vec))
  time_beta_sum <- sum(latentZ_mat[,j]*(time_vec^beta))
  
  # diffB_onlyB에서의 2차 미분 계산
  hessian_Q <- (- event_sum * 
                  ((sum(latentZ_mat[,j]*(time_vec^beta)*(log(time_vec)^2)) * time_beta_sum - 
                      time_beta_log_sum^2) / time_beta_sum^2)) -event_sum / beta^2
  print(paste0("hessian_Q ",j," ",hessian_Q ))
  hessian = hessian_Q
  newbeta = beta - gradient / hessian
}




diff_vec = function(beta,lambda,latentZ_mat,j){
  matrix(c(diffB(beta[j],lambda[j],latentZ_mat,j),diffL(beta[j],lambda[j],latentZ_mat,j)),2,1)
}

DecisionBoundary = function(t,beta_vec,lambda_vec,j=1){
  (pi_vec[j]/pi_vec[2])*(beta_vec[j]/beta_vec[2])*(lambda_vec[j]/lambda_vec[2])*t^(beta_vec[j]-1)*exp(-lambda_vec[j]*t^{beta_vec[j]}+lambda_vec[2]*t)
}


Estep_result = function(beta,lambda,pi_vec){
  weibull_pdfs = sapply(1:3, function(i) pi_vec[i]*weibull_func(time_vec, lambda = lambda[i], beta = beta[i]))
  weibull_pdf_sum = rowSums(weibull_pdfs)
  # latentZ_mat = weibull_pdfs/weibull_pdf_sum
  latentZ_mat = sweep(weibull_pdfs, 1, weibull_pdf_sum, "/")
  latentZ_mat
}

# candi_latentZ_mat %>% round(3)
# candi_latentZ_mat = Estep_result(beta_vec,lambda_vec,pi_vec)
# # print(abs(sum(latentZ_mat-candi_latentZ_mat)))
# latentDiff= abs(sum(latentZ_mat-candi_latentZ_mat))
# latentZ_mat=candi_latentZ_mat



scale_to_max <- function(x) {
  return(x / max(x))
}
scale_rows_to_sum1 <- function(mat) {
  return(t(apply(mat, 1, function(x) x / sum(x))))
}






############
# How to Identify a Bathtub Hazard Rate
# 107p


fdata = read.table('Aarest_data.txt',header = T)
# fdata = read.table('Aarest_data_censored_rot1.txt',header = T)
# fdata = read.table('Aarest_data_censored_rot2.txt',header = T)
# fdata = read.table('Aarest_data_endCensored.txt',header = T)
# fdata = read.table('FRT_censord.txt',header = T)

# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot1.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot2.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot3.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot4.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_censored_rot5.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data_endCensored.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/Aarest_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/FRT_censord.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/CNC_data.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/CNC_data_censored3.txt',header = T)
# fdata = read.table('/Users/choijisoo/Documents/Github/electronic_device.txt',header = T)


# Data preprocessing
N = nrow(fdata)
k=3 
event_vec = fdata[,2] %>% as.numeric()
time_vec = fdata[,1]%>% as.numeric()
time_vec = time_vec/(max(time_vec)*1.1)
tot=1e-4
maxBp = 1e+5
learning_rate = 1.01

# 11개의 열을 가진 빈 data.frame 생성

column_names <- c("beta1", "lambda1", "beta2", "lambda2", "beta3", "lambda3", "sumQfunc","diffB_beta1","diffB_beta3","bp","iter","Beta1 at 1","Q1","Q2","Q3","pi1","pi2","pi3")
theta_df <- data.frame(matrix(ncol = length(column_names), nrow = 0))
colnames(theta_df) <- column_names

## initial beta , lambda , pi 
initial_beta = c(0.5,1,5)
initial_pi_set = c(1,1,1)
initial_pi = initial_pi_set / sum(initial_pi_set)
init_latentZ_mat = data.frame(matrix(1/3,N,k))

## Parameters initialize beta,pi
beta_vec = initial_beta
pi_vec = initial_pi


lambda_vec = sapply(1:k ,function(i) sum(latentZ_mat[,i]*event_vec)/sum(latentZ_mat[,i]*(time_vec^beta_vec[i])) )

# latentZ_mat = Estep_result(beta_vec,lambda_vec,pi_vec)

# diffB_onlyB(1,lambda_vec[1],latentZ_mat,j=1)

## init bp
bp=1


for( i in 1:2000){
  
    print("#####################################################################################################################")
    print( paste0( "EM iteration : " , i ," sumQ :",sumQfunc(beta_vec,lambda_vec,latentZ_mat) , " Bp : ",bp ))
    print(paste0(c("pi_vec : " , sapply(pi_vec , function(i) round(i,2))),collapse = " / "))
    print(paste0(c("Lambda : " , sapply(lambda_vec , function(i) round(i,2))),collapse = " / "))
    print(paste0(c("Beta :",sapply(beta_vec , function(i) round(i,4))) ,collapse = " / "))
    print(paste0("Beta diff : " , diffB_onlyB(beta_vec[1],lambda_vec[1],latentZ_mat,j=1) %>% abs+
                   diffB_onlyB(beta_vec[3],lambda_vec[3],latentZ_mat,j=3) %>% abs))
    print(paste0(c("Beta1 at 1 is minus :",diffB_onlyB(1,lambda_vec[1],latentZ_mat,j=1)<0) ,collapse = " / "))
    print(paste0(" data save : ", nrow(theta_df)))
    print("#####################################################################################################################")
    
    #### M-Step ####
    #### Pi : M-Step :  #### 
    new_pi = colSums(latentZ_mat)/N
    #### Beta : M-Step : G-D method #### 
    before_beta = beta_vec
    before_lambda = lambda_vec
    
    diffB_onlyBeta1_with_Barrier(before_beta[1], before_lambda[1], latentZ_mat, j=1, bp)
    # newton_onlyBeta1_stepsize(before_beta[1], before_lambda[1], latentZ_mat, j=1, bp)
    # newton_onlyBeta3_stepsize(before_beta[3], before_lambda[3], latentZ_mat, j=3, bp)
    # 
    
    new_beta = c(newton_onlyBeta1_stepsize(before_beta[1], before_lambda[1], latentZ_mat, j=1, bp),
      1,
      newton_onlyBeta3_stepsize(before_beta[3], before_lambda[3], latentZ_mat, j=3, bp))
    
    new_lambda = sapply(1:k , function(i)  sum(latentZ_mat[,i]*event_vec)/sum(latentZ_mat[,i]*(time_vec^new_beta[i])))
    
    
    ### Beta Update ### 
    if(Qfunc_onlyB(beta=beta_vec[1],latentZ_mat,j=1)<Qfunc_onlyB(beta=new_beta[1],latentZ_mat,j=1)){
      beta_vec[1] = new_beta[1] 
      lambda_vec[1] = new_lambda[1]
      lambda_vec[2] = new_lambda[2]
    }
    if(Qfunc_onlyB(beta=beta_vec[3],latentZ_mat,j=3)<Qfunc_onlyB(beta=new_beta[3],latentZ_mat,j=3)){
      beta_vec[3] = new_beta[3] 
      lambda_vec[3] = new_lambda[3]
      lambda_vec[2] = new_lambda[2]
    }
    beta_vec[2] = 1
    ### Pi Update ###
    pi_vec = new_pi
    
    
    theta_df = rbind(theta_df,
                     c(beta_vec[1],lambda_vec[1],beta_vec[2],lambda_vec[2],beta_vec[3],lambda_vec[3],sumQfunc(beta_vec,lambda_vec,latentZ_mat)
                       ,diffB_onlyB(beta_vec[1],lambda_vec[1],latentZ_mat,j=1) ,
                       diffB_onlyB(beta_vec[3],lambda_vec[3],latentZ_mat,j=3) ,
                       bp,i,diffB_onlyB(1,lambda_vec[1],latentZ_mat,j=1),
                       Qfunc_onlyB(beta=beta_vec[1],latentZ_mat,j=1),
                       Qfunc_onlyB(beta=beta_vec[2],latentZ_mat,j=2),
                       Qfunc_onlyB(beta=beta_vec[3],latentZ_mat,j=3),
                       pi_vec[1],
                       pi_vec[2],
                       pi_vec[3]
                     ))
    
    
    
    
    #### E-Step ####
    latentZ_mat = Estep_result(beta_vec,lambda_vec,pi_vec)
    
    bp = learning_rate*bp
}

    

























